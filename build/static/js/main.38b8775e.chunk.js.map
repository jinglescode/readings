{"version":3,"sources":["Assets/Img/loader.svg","config.js","Utils/apollo.js","Components/Header/HeaderContainer.js","Components/Header/HeaderWrapper.js","Components/Header/HeaderTitle.js","Components/Header/HeaderSubtitle.js","Components/Header/Header.js","Components/Header/GithubLogin.js","Components/Common/Loader.js","Components/Blog/Card/CardContainer.js","Components/Blog/Card/CardHeader.js","Components/Blog/Card/CardCategory.js","Components/Blog/Card/CardTitle.js","Components/Blog/Card/CardDescription.js","Components/Blog/Card/CardReadingTime.js","Components/Blog/Card/Card.js","Containers/Blog.js","Utils/emoji.js","Utils/auth.js","Components/Post/PostContainer.js","Components/Post/PostTitle.js","Components/Post/PostDate.js","Components/Post/PostDateLink.js","Components/Post/PostReaction.js","Components/Post/BackButton.js","Containers/BlogPost.js","Router.js","Containers/GithubCallback.js","Application.js","serviceWorker.js","index.js"],"names":["module","exports","config","backgroundColor","titleColor","subtitleColor","client","ApolloClient","uri","request","operation","setContext","headers","authorization","atob","styled","div","h1","Header","className","role","id","href","data-position","data-tooltip","target","data-target","enableOAuth","absolute","button","span","LoaderContainer","Loader","src","loader","alt","CardCategory","value","key","data-badge-caption","name","style","color","h2","p","Card","blog","useState","labels","setLabels","history","useHistory","useEffect","nodes","filter","overflow","fontSize","height","onClick","title","number","push","map","i","body","GET_POSTS","gql","Blog","posts","setPosts","useQuery","loading","error","data","console","repository","issues","v","emojis","getAuthenticatedUser","a","async","token","localStorage","getItem","fetch","Headers","response","json","result","BlogHome","issueNumber","parseInt","window","location","split","pop","post","setPost","setPostNodeId","setPostReactions","setReactionFun","useCallback","reactions","reactions_array","forEach","element","emojiName","obj","by","user","login","emoji","content","issue","options","overrides","component","children","props","rel","code","jsx","createBrowserHistory","require","Router","exact","path","BlogPost","OAuthClientID","OAuthSecret","GithubCallback","setLoading","method","URLSearchParams","client_id","client_secret","authenticate","search","get","then","setItem","access_token","setUsername","replace","origin","pathname","Application","Helmet","charSet","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","log","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","addEventListener","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.38b8775e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loader.65f8709d.svg\";","export const config = {\n  // Your Github Converted Token To Know How To Get Your Token Look at Readme.md\n  githubConvertedToken: \"MTg4NjAzMjY4MWVhZjc4YTRmZmQ2M2YwOThiZDZiYmE2YjE0MTc3OA==\",\n\n  // Your Github UserName\n  githubUserName: \"jinglescode\",\n\n  // Your Github Repo Name Where You Have your issues as Blog\n  githubRepo: \"readings\",\n\n  // Set it to true if you have a Github app to add to this project\n  // and fill the client ID & secret\n  enableOAuth: true,\n  OAuthClientID: 'Iv1.9f40fd53257d4102',\n  OAuthSecret: 'cc3db76ffe9848c92d83172807eececa79f0eb22',\n\n  // Your Personal Blog Title\n  title : \"Readings\" ,\n\n  // Your Personal Blog Subtitle\n  subtitle : \"Software Developer\",\n\n  // Header customization\n  header: {\n    backgroundColor: '#f1f6f8', // can be a CSS gradient\n    titleColor: '#ff5252',\n    subtitleColor: '#37474f',\n  },\n};\n","import ApolloClient from \"apollo-boost\";\n\nimport { config } from '../config'\n\nexport const client = new ApolloClient({\n  uri: \"https://api.github.com/graphql\",\n  request: operation => {\n    operation.setContext({\n      headers: {\n        authorization: `Bearer ${atob(config.githubConvertedToken)}`\n      }\n    });\n  }\n});\n\nexport const userClient = (token) => new ApolloClient({\n  uri: \"https://api.github.com/graphql\",\n  request: operation => {\n    operation.setContext({\n      headers: {\n        authorization: `Bearer ${token}`\n      }\n    });\n  }\n});","import styled from 'styled-components'\n\nimport { config } from '../../config'\nconst { backgroundColor } = config.header\n\nexport const HeaderContainer = styled.div`\n  position: relative;\n  padding: 5em;\n  text-align: center;\n  background: ${backgroundColor};\n  background-repeat: no-repeat;\n  background-position: center center;\n  background-size: cover;\n\n  @media only screen and (max-width: 768px) {\n    padding: 3em;\n  }\n`","import styled from 'styled-components'\n\nexport const HeaderWrapper = styled.div`\n  margin: 0 auto;\n  padding: 0 1em;\n  max-width: 1140px;\n  text-align: center;\n`","import styled from 'styled-components'\n\nimport { config } from '../../config'\nconst { titleColor } = config.header\n\nexport const HeaderTitle = styled.h1`\n  font-weight: 700;\n  line-height: 1.15;\n  margin: 1.25rem 0;\n  font-size: 4.5em;\n  text-align: center;\n  color: ${titleColor};\n\n  @media only screen and (max-width: 768px) {\n    font-size: 3em;\n  }\n`","import styled from 'styled-components'\n\nimport { config } from '../../config'\nconst { subtitleColor } = config.header\n\nexport const HeaderSubtitle = styled.h1`\n  font-weight: 400;\n  color: ${subtitleColor};\n  line-height: 1.15;\n  margin: 1.25rem 0;\n  font-size: 2.5em;\n  text-align: center;\n\n  @media only screen and (max-width: 768px) {\n    font-size: 2em;\n  }\n`","import React from 'react'\n\n// import {\n//     HeaderContainer,\n//     HeaderWrapper,\n//     HeaderTitle,\n//     HeaderSubtitle,\n//     GithubLogin\n// } from './'\nimport { config } from \"../../config\"\n\nexport const Header = ( ) => {\n    return (\n      <div>\n\n        <div className=\"navbar-fixed\">\n          <nav className=\"z-depth-2 nav-bar\" role=\"navigation\">\n            <div className=\"nav-wrapper container\">\n              <a id=\"logo-container\" className=\"brand-logo truncate\">\n                Readings\n              </a>\n              <ul className=\"right hide-on-med-and-down\">\n                <li><a href=\"https://jinglescode.github.io/\" className=\"tooltipped\" data-position=\"top\" data-tooltip=\"Blog\"><i className=\"fas fa-blog\"></i><span id=\"menu-text\">Blog</span></a></li>\n                <li><a href=\"https://jinglescode.github.io/readings/\" className=\"tooltipped\" data-position=\"top\" data-tooltip=\"Readings\"><i className=\"far fa-sticky-note\"></i><span id=\"menu-text\">Readings</span></a></li>\n                <li><a href=\"https://github.com/jinglescode\" target=\"_blank\"><i className=\"fab fa-github-square\"></i><span id=\"menu-text\">GitHub</span></a></li>\n              </ul>\n              <a href=\"#\" data-target=\"slide-out\" className=\"sidenav-trigger\"><i className=\"material-icons\">menu</i></a>\n            </div>\n          </nav>\n          <a href=\"#\" data-target=\"slide-out\" className=\"sidenav-trigger\"><i className=\"material-icons\">menu</i></a>\n        </div>\n\n        <ul id=\"slide-out\" className=\"sidenav\">\n          <li><a href=\"https://jinglescode.github.io/\" className=\"tooltipped\" data-position=\"top\" data-tooltip=\"Blog\"><i className=\"fas fa-blog\"></i><span id=\"menu-text\">Blog</span></a></li>\n          <li><a href=\"https://jinglescode.github.io/readings/\" className=\"tooltipped\" data-position=\"top\" data-tooltip=\"Readings\"><i className=\"far fa-sticky-note\"></i><span id=\"menu-text\">Readings</span></a></li>\n          <li><a href=\"https://github.com/jinglescode\" target=\"_blank\"><i className=\"fab fa-github-square\"></i><span id=\"menu-text\">GitHub</span></a></li>\n        </ul>\n\n      </div>\n        // <HeaderContainer>\n        //     <GithubLogin isAbsolute={true} />\n        //     <HeaderWrapper>\n        //         <HeaderTitle>{config.title}</HeaderTitle>\n        //         <HeaderSubtitle>{config.subtitle}</HeaderSubtitle>\n        //     </HeaderWrapper>\n        // </HeaderContainer>\n    )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faGithub } from '@fortawesome/free-brands-svg-icons'\nimport { config } from '../../config'\n\nconst { enableOAuth, OAuthClientID } = config\n\nconst ButtonContainer = styled.div`\n  display: ${enableOAuth ? 'block' : 'none'};\n  position: ${({ absolute }) => absolute ? 'absolute' : 'initial'};\n  top: 10px;\n  right: 10px;\n`\nconst Button = styled.button`\n  -webkit-appearance: none;\n  background: linear-gradient(180deg, rgb(136, 220, 109) 0%, rgb(92, 168, 65) 100%);\n  color: #FFF;\n  border: none;\n  padding: 8px 16px;\n  font-size: 16px;\n  border-radius: 5px;\n  cursor: pointer;\n  transition: 0.2s;\n  outline: 0;\n\n  :hover {\n    box-shadow: 0px 0px 10px 1px rgba(0,0,0,0.10);\n  }\n`\n\nconst Text = styled.span`\n  color: #FFF;\n  font-size: 18px;\n`\n\nexport const GithubLogin = ({ isAbsolute }) => {\n  const isLoggedIn = localStorage.getItem('githubToken') || false\n\n  const callOAuth = async () => {\n    window.location.href = 'https://github.com/login/oauth/authorize?client_id=' + OAuthClientID;\n  }\n\n  return (\n    <ButtonContainer absolute={isAbsolute}>\n      {!isLoggedIn\n       ? (\n          <Button onClick={callOAuth}>\n            <FontAwesomeIcon icon={faGithub} /> Log in\n          </Button>\n         )\n       : <Text>Logged in as {localStorage.getItem('githubUsername')}</Text>\n      }\n    </ButtonContainer>\n  )\n}","import React from 'react'\nimport styled from 'styled-components'\n\nimport loader from '../../Assets/Img/loader.svg'\n\nconst LoaderContainer = styled.span`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  img {\n    height: 128px;\n  }\n`\n\nexport const Loader = () => (\n  <LoaderContainer>\n    <img src={loader} alt=\"Loading...\" />\n  </LoaderContainer>\n)","import styled from 'styled-components'\n\nexport const CardContainer = styled.div`\n  cursor: pointer;\n  margin-bottom: 6rem;\n  border-radius: 10px;\n  padding: 10px;\n  transition: 0.2s;\n  position: relative;\n\n  :hover {\n    background-color: #F5F5F5;\n  }\n`","import styled from 'styled-components'\n\nexport const CardHeader = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`","import React from 'react'\n// import styled from 'styled-components'\n\n// const StyledCategory = styled.div`\n//   display: inline-block;\n//   background: #009bbb;\n//   border-radius: 3px;\n//   padding: 3px 15px;\n//   font-size: 12px;\n//   text-transform: uppercase;\n//   color: #fff;\n//   font-weight: 300;\n//   line-height: 28px;\n//   font-family: \"Quicksand\";\n//   margin-right: 10px;\n// `\n\nexport const CardCategory = ({ value }) => (\n  <span className=\"new badge\" key={value.id} data-badge-caption={value.name} style={{ backgroundColor: `#${value.color}` }}></span>\n\n)\n","import styled from 'styled-components'\n\nexport const CardTitle = styled.h2`\n  font-size: 34px;\n`","import styled from 'styled-components'\n\nexport const CardDescription = styled.p`\n  font-size: 18px;\n  overflow: hidden;\n  display: -webkit-box;\n  -webkit-line-clamp: 3;\n  -webkit-box-orient: vertical;\n`","import React from 'react'\nimport styled from 'styled-components'\n\nconst ReadingTime = styled.p`\n  color: #b5b5b5;\n  font-size: 15px;\n  position: absolute;\n  top: -10px;\n  right: 10px;\n`\n\nexport const CardReadingTime = ({ time }) => (\n  <ReadingTime>{time} Min Read</ReadingTime>\n)","import React, { useState, useEffect } from \"react\";\n// import readingTime from \"reading-time\";\nimport { useHistory } from \"react-router-dom\";\n\nimport {\n  // CardContainer,\n  // CardHeader,\n  CardCategory,\n  // CardReadingTime,\n  // CardTitle,\n  // CardDescription,\n} from './'\n\nexport const Card = ({ blog }) => {\n  const [labels, setLabels] = useState([]);\n  const history = useHistory();\n\n  const openBlog = (title, number) => {\n    history.push(`/blog/${title}/${number}`);\n  }\n\n  useEffect(() => {\n    const labels = blog.labels.nodes.filter((value) => {\n      return value.name !== \"blog\";\n    });\n\n    setLabels(labels);\n  }, [blog.labels.nodes]);\n\n  const styleCard = {\n    overflow:\"hidden\"\n  }\n\n  const styleCardTitle = {\n    fontSize:\"20px\",\n    height:\"70px\"\n  }\n\n  return (\n    <div className=\"col s12 m6 l4\">\n      <div className=\"card hoverable\">\n        <div className=\"card-content\" style={styleCard}>\n          <i className=\"material-icons right activator\">more_vert</i>\n          <span className=\"card-title activator grey-text text-darken-4\" style={styleCardTitle} onClick={() => openBlog(blog.title, blog.number)}>\n            {blog.title}\n          </span>\n\n        </div>\n        <div className=\"card-action\">\n          &nbsp;\n          <>\n          {labels.map((value, i) => {\n            return (\n              <CardCategory value={value} key={i} />\n            );\n          })}\n          </>\n        </div>\n        <div className=\"card-reveal\">\n          <span className=\"card-title grey-text text-darken-4\">{blog.title}<i className=\"material-icons right\">close</i></span>\n          {blog.body}\n        </div>\n      </div>\n    </div>\n\n    // <CardContainer>\n    //   <CardHeader>\n    //     <>\n    //     {labels.map((value, i) => {\n    //       return (\n    //         <CardCategory value={value} key={i} />\n    //       );\n    //     })}\n    //     </>\n    //     <CardReadingTime time={readingTime(blog.body).minutes} />\n    //   </CardHeader>\n    //   <div onClick={() => openBlog(blog.title, blog.number)}>\n    //     <CardTitle>{blog.title}</CardTitle>\n    //     <CardDescription>\n    //       {blog.bodyText}\n    //     </CardDescription>\n    //   </div>\n    // </CardContainer>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { gql } from \"apollo-boost\";\nimport { useQuery } from '@apollo/react-hooks';\n\nimport { config } from \"../config\";\nimport { Header } from \"../Components/Header\";\nimport { Loader } from '../Components/Common'\n// import { BlogContainer } from '../Components/Blog'\nimport { Card } from '../Components/Blog/Card'\n\nconst GET_POSTS = gql`\n{\n  repository(owner: \"${config.githubUserName}\", name: \"${config.githubRepo}\") {\n    issues(first: 100, states: OPEN, filterBy: { labels: \"blog\" }) {\n      nodes {\n        title\n        body\n        bodyHTML\n        bodyText\n        number\n        labels(first: 100) {\n          nodes {\n            color\n            name\n            id\n          }\n        }\n        author {\n          url\n          avatarUrl\n          login\n        }\n        updatedAt\n        id\n      }\n    }\n  }\n}\n`\n\nconst Blog = () => {\n  const [posts, setPosts] = useState([]);\n  const { loading, error, data } = useQuery(GET_POSTS);\n\n  useEffect(() => {\n    if (!loading) {\n      if (error) {\n        console.error(error)\n      }\n\n      if (data) {\n        setPosts(data?.repository?.issues?.nodes)\n      }\n    }\n  }, [loading, error, data]);\n\n  return (\n    <>\n      <Header />\n      <div className=\"container\">\n        <div className=\"row\">\n          {\n            loading\n            ? <Loader />\n            : posts.map((v, i) => {\n                return <Card blog={v} key={i} />;\n              })\n          }\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Blog;\n","import { reverseMapping } from './tools'\n\nconst emojis = {\n  'THUMBS_UP': '👍',\n  'THUMBS_DOWN': '👎',\n  'LAUGH': '😄',\n  'HOORAY': '🎉',\n  'CONFUSED': '😕',\n  'HEART': '❤️',\n  'ROCKET': '🚀',\n  'EYES': '👀',\n}\n\nexport const getEmojiByName = (emojiName) => {\n  return emojis[emojiName] || '';\n};\n\nexport const getNameByEmoji = (emoji) => {\n  return reverseMapping(emojis)[emoji] || '';\n};","export const getToken = () => {\n  return localStorage.getItem('githubToken');\n}\n\nexport const getAuthenticatedUser = async () => {\n  const token = localStorage.getItem('githubToken');\n  if (token) {\n    const response = await fetch('https://api.github.com/user', {\n      headers: new Headers({\n        authorization: `Bearer ${token}`\n      }),\n    });\n    const result = await response.json();\n    result.token = token;\n    return result;\n  }\n}","import styled from 'styled-components'\n\nexport const PostContainer = styled.div`\n  margin: 2rem auto 0;\n  width: 90%;\n  max-width: 700px;\n  padding: 20px 10px;\n  position: relative;\n`","import styled from 'styled-components'\n\nexport const PostTitle = styled.h1`\n  @media only screen and (max-width: 768px) {\n    font-size: 30px;\n  }\n`","import styled from 'styled-components'\n\nexport const PostDate = styled.p`\n  color: rgba(0, 0, 0, 0.54);\n  font-weight: 400;\n  font-size: 14px;\n  margin-bottom: 0px;\n  margin-top: 0px;\n`","import styled from 'styled-components'\n\nexport const PostDateLink = styled.a`\n  font-size: 14px;\n  text-decoration: none;\n  transition-duration: 0.15s, 0.15s, 0.15s;\n  transition-timing-function: ease-in, ease-in, ease-in;\n  transition-delay: 0s, 0s, 0s;\n  color: rgba(0, 0, 0, 0.54);\n\n  :hover {\n    color: rgba(0, 0, 0, 0.84);\n  }\n`","import styled from 'styled-components'\n\nexport const PostReaction = styled.span`\n  position: absolute;\n  bottom: 60px;\n  animation-name: scale-in;\n  animation-duration: 0.15s;\n  animation-timing-function: cubic-bezier(0.2, 0, 0.13, 1.5);\n`","import styled from \"styled-components\";\n\nexport const BackButton = styled.button`\n  outline: none;\n  border: 1px solid;\n  font-size: 22px;\n  font-family: \"Shadows Into Light\", serif;\n  border-radius: 5px;\n  padding: 0px 20px 0 30px;\n  cursor: pointer;\n  position: relative;\n\n  :hover {\n    background-color: black;\n    color: white;\n  }\n\n  :before {\n    content: \"\\\\27A4\";\n    position: absolute;\n    transform: translateY(-50%) rotate(180deg);\n    left: 10px;\n    font-size: 16px;\n    top: 54%;\n  }\n`;\n","import React, { useState, useEffect, useCallback, useRef } from \"react\";\n// import moment from \"moment\";\nimport Markdown from \"markdown-to-jsx\";\n// import readingTime from \"reading-time\";\n// import SyntaxHighlighter from \"react-syntax-highlighter\";\n// import { docco } from \"react-syntax-highlighter/dist/esm/styles/hljs\";\n// import { GithubSelector, GithubCounter } from \"react-reactions\";\nimport { userClient } from '../Utils/apollo'\nimport { gql } from \"apollo-boost\";\nimport { useQuery } from \"@apollo/react-hooks\";\n\nimport { config } from \"../config\";\nimport { getEmojiByName, getNameByEmoji } from '../Utils/emoji';\nimport { getAuthenticatedUser } from '../Utils/auth'\nimport { Loader } from \"../Components/Common\";\nimport { PostContainer, PostTitle, PostDate, PostDateLink, PostReaction, BackButton } from \"../Components/Post\";\n// import { AuthorDetails, AuthorAvatar, AuthorName } from \"../Components/Post/Author\";\n// import { GithubLogin } from '../Components/Header'\n\nimport { Header } from \"../Components/Header\";\n\nexport default function BlogHome() {\n  const issueNumber = parseInt(window.location.href.split(\"/\").pop());\n  const GET_POSTS = gql`{\n    repository(owner: \"${config.githubUserName}\", name: \"${config.githubRepo}\") {\n      issue(number: ${issueNumber}) {\n        title\n        body\n        bodyHTML\n        url\n        bodyText\n        number\n        bodyHTML\n        author {\n          url\n          avatarUrl\n          login\n        }\n        reactions(first:100){\n          nodes{\n            content\n            user{\n              id\n              login\n            }\n          }\n        }\n        updatedAt\n        id\n      }\n    }\n  }\n  `;\n  const [post, setPost] = useState([]);\n  const [postNodeId, setPostNodeId] = useState('');\n  // const [reactionPopup, setReactionPopup] = useState(false);\n  const [postReactions, setPostReactions] = useState([]);\n  const { loading, error, data } = useQuery(GET_POSTS);\n  // const reactionsContainer = useRef(null);\n  const userToken = localStorage.getItem('githubToken');\n\n  const setReactionFun = useCallback((reactions) => {\n    // {\n    //   emoji: \"👍\", // String emoji reaction\n    //   by: \"case\" // String of persons name\n    // }\n\n    let reactions_array = [];\n    reactions.forEach(element => {\n      let obj = {\n        by: element.user.login,\n        emoji: getEmojiByName(element.content)\n      };\n      reactions_array.push(obj);\n    });\n\n    setPostReactions(reactions_array);\n  }, []);\n\n\n  const H1 = ({ children }) => (\n    <h1>\n      {children}\n      <style jsx=\"true\">\n        {`\n          h1 {\n            font-size: 2rem !important;\n          }\n        `}\n      </style>\n    </h1>\n  );\n\n  const HyperLink = ({ children, ...props }) => (\n    <a href={props.href} target=\"_blank\" rel=\"noopener noreferrer\">\n      {children}\n    </a>\n  );\n\n  const CodeBlock = ({ children }) => (\n    <div className=\"highlight\">\n      <pre className=\"highlight\">\n        <code>\n          {children}\n        </code>\n      </pre>\n    </div>\n  );\n\n  // const toggleReaction = async (emoji) => {\n  //   let reactions = postReactions;\n  //   const user = await getAuthenticatedUser();\n  //   const existingReaction = reactions.filter(r => (r.emoji === emoji && r.by === user.login))\n  //\n  //   if (existingReaction.length === 0) {\n  //     const reactionToAdd = {\n  //       by: user.login,\n  //       emoji: emoji,\n  //     }\n  //\n  //     // Add the reaction\n  //     await userClient(userToken).mutate({\n  //       mutation: gql`\n  //         mutation AddReaction {\n  //           addReaction(input:{subjectId:\"${postNodeId}\",content:${getNameByEmoji(emoji)},clientMutationId:\"${user.node_id}\"}) {\n  //             reaction {\n  //               id\n  //             }\n  //           }\n  //         }\n  //       `\n  //     });\n  //\n  //     reactions.push(reactionToAdd);\n  //   } else {\n  //     // Remove the reaction\n  //     await userClient(userToken).mutate({\n  //       mutation: gql`\n  //         mutation RemoveReaction {\n  //           removeReaction(input:{subjectId:\"${postNodeId}\",content:${getNameByEmoji(emoji)},clientMutationId:\"${user.node_id}\"}) {\n  //             reaction {\n  //               id\n  //             }\n  //           }\n  //         }\n  //       `\n  //     });\n  //\n  //     // Remove the reaction from the state\n  //     reactions = reactions.filter(r => !(r.by === user.login && r.emoji === emoji))\n  //   }\n  //\n  //   setPostReactions(reactions);\n  //   reactionsContainer.current.forceUpdate(); // refresh the counter\n  //   setReactionPopup(false); // hiding the reactions choice\n  // }\n\n  useEffect(() => {\n    if (!loading) {\n      if (data) {\n        const issues = data.repository.issue;\n        setPostNodeId(issues.id);\n        setPost(issues);\n        setReactionFun(issues.reactions.nodes);\n      }\n    }\n  }, [loading, error, data, setReactionFun]);\n\n  if (loading) {\n    return <Loader />;\n  }\n\n  const onBackClick = () => {\n    // ifthe previous page does not exist in the history list. this method to load the previous (or next) URL in the history list.\n    window.history.go();\n    // The back() method loads the previous URL in the history list.\n    window.history.back();\n  };\n\n  return (\n    <>\n      <Header title={post.title} />\n      {post.title && (\n      <div className=\"container blog-content\">\n        <div className=\"card\">\n          <div className=\"card-content\">\n            <h1 className=\"title grey-text text-darken-4\">{post.title}</h1>\n          </div>\n          <div className=\"card-content blog-content\">\n            <Markdown options={{\n                overrides: {\n                  a: {\n                    component: HyperLink\n                  },\n                  code: {\n                    component: CodeBlock\n                  },\n                  h1: {\n                    component: H1\n                  }\n                }\n              }}>\n              {post.body}\n            </Markdown>\n          </div>\n        </div>\n      </div>\n      )}\n    </>\n  );\n}\n","import React from \"react\";\nimport { HashRouter, Switch, Route } from \"react-router-dom\";\n\nimport Blog from \"./Containers/Blog\"\nimport BlogPost from \"./Containers/BlogPost\";\n\nvar createBrowserHistory = require(\"history\").createBrowserHistory;\nconst history = createBrowserHistory();\n\nconst Router = () => {\n  return (\n    <HashRouter history={history}>\n      <Switch>\n        <Route exact path=\"/\" component={Blog} />\n        <Route exact path=\"/blog/:title/:issueNumber\" component={BlogPost}/>\n      </Switch>\n    </HashRouter>\n  );\n};\n\nexport default Router;\n","import React, { useEffect, useState } from 'react'\n\nimport { config } from '../config'\nimport { getAuthenticatedUser } from '../Utils/auth'\nimport { Loader } from '../Components/Common/Loader'\n\nconst { enableOAuth, OAuthClientID, OAuthSecret } = config\n\nconst GithubCallback = () => {\n  const [loading, setLoading] = useState(true)\n\n  const authenticate = async (code) => {\n    // Apparently we need to use a proxy to make this request (CORS blocked for client-side only applications)\n    const response = await fetch('https://cors-anywhere.herokuapp.com/https://github.com/login/oauth/access_token', {\n      method: 'POST',\n      body: new URLSearchParams({\n        client_id: OAuthClientID,\n        client_secret: OAuthSecret,\n        code: code,\n      }),\n      headers: new Headers({\n        'Accept': 'application/json',\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }),\n    })\n\n    return response.json()\n  }\n\n  const setUsername = async () => {\n    const { login } = await getAuthenticatedUser()\n    localStorage.setItem('githubUsername', login)\n  }\n\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    authenticate(urlParams.get('code'))\n    .then((response) => {\n      if (response) {\n        localStorage.setItem('githubToken', response.access_token)\n        setUsername().then(() => setLoading(false))\n      }\n    })\n  }, [])\n\n  if (!enableOAuth || !loading) {\n    return window.location.replace(window.location.origin + window.location.pathname);\n  }\n\n  return <Loader />\n}\n\nexport default GithubCallback\n","import React from 'react'\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { Helmet } from \"react-helmet\";\n\nimport { config } from './config'\nimport { client } from './Utils/apollo';\nimport Router from './Router';\nimport GithubCallback from './Containers/GithubCallback';\n\nconst Application = () => {\n  const urlParams = new URLSearchParams(window.location.search);\n\n  if (urlParams.get('code')) {\n    return <GithubCallback />\n  }\n\n  return (\n    <>\n      <Helmet>\n          <title>{config.title}</title>\n          <meta charSet=\"utf-8\" />\n          <meta name=\"description\" content={config.subtitle} />\n          <meta name=\"theme-color\" content={config.header.backgroundColor} />\n      </Helmet>\n      <ApolloProvider client={client}>\n        <Router />\n      </ApolloProvider>\n    </>\n  )\n};\n\nexport default Application;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Application from './Application';\nimport * as serviceWorker from './serviceWorker';\n// import './index_ori.css';\nimport './index.css';\n\nReactDOM.render(<Application />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nif(process.env.NODE_ENV === 'production') serviceWorker.register();\nelse serviceWorker.unregister();\n"],"sourceRoot":""}